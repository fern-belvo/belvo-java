package com.belvo.api.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = PatchBodyWithoutSaveData.Builder.class
)
public final class PatchBodyWithoutSaveData {
  private final String session;

  private final Optional<String> token;

  private final String link;

  private int _cachedHashCode;

  PatchBodyWithoutSaveData(String session, Optional<String> token, String link) {
    this.session = session;
    this.token = token;
    this.link = link;
  }

  /**
   * @return The session you want to resume. You need to use the <code>session</code> value that is provided in the 428 Token Required response that you receive after you make your POST request.
   */
  @JsonProperty("session")
  public String getSession() {
    return session;
  }

  /**
   * @return The MFA token generated by the institution and required to continue a session.
   */
  @JsonProperty("token")
  public Optional<String> getToken() {
    return token;
  }

  /**
   * @return The <code>link.id</code> you want to resume. Must be the same <code>link.id</code> as the one you receive in the 428 Token Required response that contains the <code>session</code> ID.
   */
  @JsonProperty("link")
  public String getLink() {
    return link;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PatchBodyWithoutSaveData && equalTo((PatchBodyWithoutSaveData) other);
  }

  private boolean equalTo(PatchBodyWithoutSaveData other) {
    return session.equals(other.session) && token.equals(other.token) && link.equals(other.link);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.session, this.token, this.link);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "PatchBodyWithoutSaveData{" + "session: " + session + ", token: " + token + ", link: " + link + "}";
  }

  public static SessionStage builder() {
    return new Builder();
  }

  public interface SessionStage {
    LinkStage session(String session);

    Builder from(PatchBodyWithoutSaveData other);
  }

  public interface LinkStage {
    _FinalStage link(String link);
  }

  public interface _FinalStage {
    PatchBodyWithoutSaveData build();

    _FinalStage token(Optional<String> token);

    _FinalStage token(String token);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements SessionStage, LinkStage, _FinalStage {
    private String session;

    private String link;

    private Optional<String> token = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(PatchBodyWithoutSaveData other) {
      session(other.getSession());
      token(other.getToken());
      link(other.getLink());
      return this;
    }

    /**
     * <p>The session you want to resume. You need to use the <code>session</code> value that is provided in the 428 Token Required response that you receive after you make your POST request.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("session")
    public LinkStage session(String session) {
      this.session = session;
      return this;
    }

    /**
     * <p>The <code>link.id</code> you want to resume. Must be the same <code>link.id</code> as the one you receive in the 428 Token Required response that contains the <code>session</code> ID.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("link")
    public _FinalStage link(String link) {
      this.link = link;
      return this;
    }

    /**
     * <p>The MFA token generated by the institution and required to continue a session.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage token(String token) {
      this.token = Optional.of(token);
      return this;
    }

    @Override
    @JsonSetter(
        value = "token",
        nulls = Nulls.SKIP
    )
    public _FinalStage token(Optional<String> token) {
      this.token = token;
      return this;
    }

    @Override
    public PatchBodyWithoutSaveData build() {
      return new PatchBodyWithoutSaveData(session, token, link);
    }
  }
}
