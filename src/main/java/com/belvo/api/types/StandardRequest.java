package com.belvo.api.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = StandardRequest.Builder.class
)
public final class StandardRequest {
  private final String link;

  private final Optional<String> token;

  private final Optional<Boolean> saveData;

  private int _cachedHashCode;

  StandardRequest(String link, Optional<String> token, Optional<Boolean> saveData) {
    this.link = link;
    this.token = token;
    this.saveData = saveData;
  }

  /**
   * @return The <code>link.id</code> that you want to get information for.
   */
  @JsonProperty("link")
  public String getLink() {
    return link;
  }

  /**
   * @return The OTP token generated by the bank.
   */
  @JsonProperty("token")
  public Optional<String> getToken() {
    return token;
  }

  /**
   * @return Indicates whether or not to persist the data in Belvo. By default, this is set to <code>true</code> and we return a 201 Created response.
   * When set to <code>false</code>, the data won't be persisted and we return a 200 OK response.
   */
  @JsonProperty("save_data")
  public Optional<Boolean> getSaveData() {
    return saveData;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof StandardRequest && equalTo((StandardRequest) other);
  }

  private boolean equalTo(StandardRequest other) {
    return link.equals(other.link) && token.equals(other.token) && saveData.equals(other.saveData);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.link, this.token, this.saveData);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "StandardRequest{" + "link: " + link + ", token: " + token + ", saveData: " + saveData + "}";
  }

  public static LinkStage builder() {
    return new Builder();
  }

  public interface LinkStage {
    _FinalStage link(String link);

    Builder from(StandardRequest other);
  }

  public interface _FinalStage {
    StandardRequest build();

    _FinalStage token(Optional<String> token);

    _FinalStage token(String token);

    _FinalStage saveData(Optional<Boolean> saveData);

    _FinalStage saveData(Boolean saveData);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements LinkStage, _FinalStage {
    private String link;

    private Optional<Boolean> saveData = Optional.empty();

    private Optional<String> token = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(StandardRequest other) {
      link(other.getLink());
      token(other.getToken());
      saveData(other.getSaveData());
      return this;
    }

    /**
     * <p>The <code>link.id</code> that you want to get information for.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("link")
    public _FinalStage link(String link) {
      this.link = link;
      return this;
    }

    /**
     * <p>Indicates whether or not to persist the data in Belvo. By default, this is set to <code>true</code> and we return a 201 Created response.
     * When set to <code>false</code>, the data won't be persisted and we return a 200 OK response.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage saveData(Boolean saveData) {
      this.saveData = Optional.of(saveData);
      return this;
    }

    @Override
    @JsonSetter(
        value = "save_data",
        nulls = Nulls.SKIP
    )
    public _FinalStage saveData(Optional<Boolean> saveData) {
      this.saveData = saveData;
      return this;
    }

    /**
     * <p>The OTP token generated by the bank.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage token(String token) {
      this.token = Optional.of(token);
      return this;
    }

    @Override
    @JsonSetter(
        value = "token",
        nulls = Nulls.SKIP
    )
    public _FinalStage token(Optional<String> token) {
      this.token = token;
      return this;
    }

    @Override
    public StandardRequest build() {
      return new StandardRequest(link, token, saveData);
    }
  }
}
