package com.belvo.api.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = PatchPaymentMethodDetailsPse.Builder.class
)
public final class PatchPaymentMethodDetailsPse {
  private final Optional<String> payerInstitution;

  private final Optional<String> username;

  private final Optional<String> password;

  private final Optional<String> payerToken;

  private final Optional<String> payerBankAccount;

  private int _cachedHashCode;

  PatchPaymentMethodDetailsPse(Optional<String> payerInstitution, Optional<String> username,
      Optional<String> password, Optional<String> payerToken, Optional<String> payerBankAccount) {
    this.payerInstitution = payerInstitution;
    this.username = username;
    this.password = password;
    this.payerToken = payerToken;
    this.payerBankAccount = payerBankAccount;
  }

  /**
   * @return Belvo's unique identifier for the payer’s institution.
   * <p><strong>Note</strong>: You need to send through this information after you received the <code>pse_display_payment_method_information</code> next step in the payment intent.</p>
   */
  @JsonProperty("payer_institution")
  public Optional<String> getPayerInstitution() {
    return payerInstitution;
  }

  /**
   * @return The username used to log in to the institution.
   * <p><strong>Note</strong>: You need to send through this information after you received the <code>pse_display_credentials_required</code> next step in the payment intent.</p>
   */
  @JsonProperty("username")
  public Optional<String> getUsername() {
    return username;
  }

  /**
   * @return The password used to log in to the institution.
   * <p><strong>Note</strong>: You need to send through this information after you received the <code>pse_display_credentials_required</code> next step in the payment intent.</p>
   */
  @JsonProperty("password")
  public Optional<String> getPassword() {
    return password;
  }

  /**
   * @return The MFA token generated by the institution and required to continue the payment flow.
   * <p><strong>Note</strong>: You need to send through this information if you received the <code>pse_display_token_required</code> next step in the payment intent.</p>
   */
  @JsonProperty("payer_token")
  public Optional<String> getPayerToken() {
    return payerToken;
  }

  /**
   * @return Belvo's unique identifier for the payer’s bank account.
   * <p><strong>Note</strong>: You need to send through this information after you received the <code>pse_display_customer_bank_accounts</code> next step in the payment intent.</p>
   */
  @JsonProperty("payer_bank_account")
  public Optional<String> getPayerBankAccount() {
    return payerBankAccount;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PatchPaymentMethodDetailsPse && equalTo((PatchPaymentMethodDetailsPse) other);
  }

  private boolean equalTo(PatchPaymentMethodDetailsPse other) {
    return payerInstitution.equals(other.payerInstitution) && username.equals(other.username) && password.equals(other.password) && payerToken.equals(other.payerToken) && payerBankAccount.equals(other.payerBankAccount);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.payerInstitution, this.username, this.password, this.payerToken, this.payerBankAccount);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "PatchPaymentMethodDetailsPse{" + "payerInstitution: " + payerInstitution + ", username: " + username + ", password: " + password + ", payerToken: " + payerToken + ", payerBankAccount: " + payerBankAccount + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> payerInstitution = Optional.empty();

    private Optional<String> username = Optional.empty();

    private Optional<String> password = Optional.empty();

    private Optional<String> payerToken = Optional.empty();

    private Optional<String> payerBankAccount = Optional.empty();

    private Builder() {
    }

    public Builder from(PatchPaymentMethodDetailsPse other) {
      payerInstitution(other.getPayerInstitution());
      username(other.getUsername());
      password(other.getPassword());
      payerToken(other.getPayerToken());
      payerBankAccount(other.getPayerBankAccount());
      return this;
    }

    @JsonSetter(
        value = "payer_institution",
        nulls = Nulls.SKIP
    )
    public Builder payerInstitution(Optional<String> payerInstitution) {
      this.payerInstitution = payerInstitution;
      return this;
    }

    public Builder payerInstitution(String payerInstitution) {
      this.payerInstitution = Optional.of(payerInstitution);
      return this;
    }

    @JsonSetter(
        value = "username",
        nulls = Nulls.SKIP
    )
    public Builder username(Optional<String> username) {
      this.username = username;
      return this;
    }

    public Builder username(String username) {
      this.username = Optional.of(username);
      return this;
    }

    @JsonSetter(
        value = "password",
        nulls = Nulls.SKIP
    )
    public Builder password(Optional<String> password) {
      this.password = password;
      return this;
    }

    public Builder password(String password) {
      this.password = Optional.of(password);
      return this;
    }

    @JsonSetter(
        value = "payer_token",
        nulls = Nulls.SKIP
    )
    public Builder payerToken(Optional<String> payerToken) {
      this.payerToken = payerToken;
      return this;
    }

    public Builder payerToken(String payerToken) {
      this.payerToken = Optional.of(payerToken);
      return this;
    }

    @JsonSetter(
        value = "payer_bank_account",
        nulls = Nulls.SKIP
    )
    public Builder payerBankAccount(Optional<String> payerBankAccount) {
      this.payerBankAccount = payerBankAccount;
      return this;
    }

    public Builder payerBankAccount(String payerBankAccount) {
      this.payerBankAccount = Optional.of(payerBankAccount);
      return this;
    }

    public PatchPaymentMethodDetailsPse build() {
      return new PatchPaymentMethodDetailsPse(payerInstitution, username, password, payerToken, payerBankAccount);
    }
  }
}
